{
	"scopeName": "source.alg",
	"name": "Z Language",
	"patterns": [
	  {
		"name": "comment.block.curly.zlang",
		"begin": "\\{",
		"end": "\\}",
		"captures": {
		  "0": {
			"name": "punctuation.definition.comment.zlang"
		  }
		}
	  },
	  {
		"name": "comment.block.slash.zlang",
		"begin": "/\\*",
		"end": "\\*/",
		"captures": {
		  "0": {
			"name": "punctuation.definition.comment.zlang"
		  }
		}
	  },
	  {
		"name": "comment.line.double-slash.zlang",
		"match": "//.*$"
	  },
	  {
		"name": "keyword.control.zlang",
		"match": "\\b(IF|ELSE|ENDIF|SI|SINON|FSI|WHILE|ENDWHILE|WH|EWH|TANTQUE|FTQ|TQ|FOR|ENDFOR|EFOR|POUR|FINPOUR|FPOUR|CALL|APPEL|BEGIN|END|DEBUT|FIN|LET)\\b"
	  },
	  {
		"name": "keyword.declaration.zlang",
		"match": "\\b(ACTION|ACTIONS|FUNCTION|FUNCTIONS|FONCTION|FONCTIONS|POINTER|TO|VERS|OF|DE|STRUCTURE|STRUCTURES|ARRAY|ARRAYS|TABLEAU|TABLEAUX|LIST|LISTS|LISTE|LISTES|BILIST|QUEUE|QUEUES|FILE|FILES|STACK|STACKS|PILE|PILES|BST|MST|HEADER|BUFFER|DYNAMIC|SOIT|SOIENT|ARB|VECTEUR|VECTEURS|UN|UNE|DES)\\b"
	  },
	  {
		"name": "storage.type.zlang",
		"match": "\\b(INTEGER|INTEGERS|ENTIER|ENTIERS|BOOLEAN|BOOLEANS|BOOLEEN|BOOLEENS|CHAR|CHARACTER|CHARACTERS|CAR|STRING|STRINGS|CHAINE|CHAINES|POINTEUR|LISTE|PILE|FILE)\\b"
	  },
	  {
		"name": "constant.language.zlang",
		"match": "\\b(TRUE|FALSE|VRAI|FAUX|NULL|NIL)\\b"
	  },
	  {
		"name": "keyword.operator.assignment.zlang",
		"match": ":="
	  },
	  {
		"name": "keyword.operator.comparison.zlang",
		"match": "<=|>=|<>|<|>|=|#"
	  },
	  {
		"name": "keyword.operator.logical.zlang",
		"match": "\\b(AND|OR|NOT|ET|OU|NON)\\b"
	  },
	  {
		"name": "keyword.operator.arithmetic.zlang",
		"match": "\\+|-|\\*|/"
	  },
	  {
		"name": "support.function.builtin.zlang",
		"match": "\\b(MOD|MAX|MIN|EXP|RANDNUMBER|RANDSTRING|ALEANUMBER|ALEACHAINE|ALEANOMBRE|CHARACT|LENTHSTRING|STRINGLENGTH|HAUTEUR|HEIGHT)\\b"
	  },
	  {
		"name": "support.function.highlevel.zlang",
		"match": "\\b(CREATE_LIST|CREATE_BILIST|CREATE_STACK|CREATE_QUEUE|CREER_QUEUE|CREATE_BST|CREATE_MST|CREATE_FILE|CREATE_ARB|CREATE_ARM|CREATE_PILE|INIT_STRUCT|INIT_ARRAY|INIT_VECT|CREATE-LISTE|CREER_LISTE|CREER_LISTEBI|CREER_ARB|CREER_ARM|CREER_PILE|CREERFILE|INIT_TAB|ALLOCATE|ALLOUER|CREERNOEUD|createlist|FREE_TREE|FREE_LIST|FREE_STACK|APPEND|GEN_BST|LIST_INORDER|VERIF_BST|RESETVISITED|COPYBST|PRINTGIVENLEVELDG|PRINTGIVENLEVELGD|DELETEGIVENLEVELDG|DELETEGIVENLEVELGD|NODES_LIST_LR|NODES_LIST_RL|COMPARE_LISTS|TOP1)\\b"
	  },
	  {
		"name": "support.function.adt.zlang",
		"match": "\\b(ADD|RAJOUTER|ALLOCATE_CELL|ALLOCATE_NODE|ALLOC_ARRAY|ALLOC_BLOCK|ALLOC_STRUCT|FREE|LIBERER|FREE_ARRAY|LIBER_TAB|FREE_NODE|LIBERERNOEUD|FREE_STRUCT|LIBER_STRUCT|CELL_VALUE|VALUE|VALEUR|NEXT|SUIVANT|PREVIOUS|PRECEDENT|ASS_ADR|AFF_ADR|ASS_VAL|AFF_VAL|ASS_L_ADR|AFF_ADRG|ASS_R_ADR|AFF_ADRD|PUSH|EMPILER|POP|DEPILER|EMPTY_STACK|PILEVIDE|CREATESTACK|CREERPILE|ENQUEUE|ENFILER|DEQUEUE|DEFILER|EMPTY_QUEUE|FILEVIDE|CREATEQUEUE|LC|FG|RC|FD|PARENT|PERE|NODE_VALUE|INFO|ASS_LC|AFF_FG|ASS_RC|AFF_FD|ASS_PARENT|AFF_PERE|ASS_NODE_VAL|AFF_INFO|CHILD|FILS|NODE_VALUE_MST|INFOR|ASS_CHILD|AFF_FILS|ASS_NODE_VAL_MST|AFF_INFOR|DEGREE|DEGRE|ASS_DEGREE|AFF_DEGRE|AFF_PARENT|ELEMENT|ASS_ELEMENT|AFF_ELEMENT|STRUCT|ASS_STRUCT|AFF_STRUCT|OPEN|OUVRIR|CLOSE|FERMER|READSEQ|LIRESEQ|WRITESEQ|ECRIRESEQ|READDIR|LIREDIR|WRITEDIR|ECRIREDIR|ENDFILE|FINFICH|ALLOC_BLOCK|ALLOC_BLOC|ASS_HEADER|AFF_ENTETE|HEADSEQ)\\b"
	  },
	  {
		"name": "keyword.io.zlang",
		"match": "\\b(READ|WRITE|LIRE|ECRIRE)\\b"
	  },
	  {
		"begin": "\\b(FUNCTION|FONCTION)\\s+([A-Za-z_][A-Za-z0-9_]*)",
		"beginCaptures": {
		  "1": { "name": "keyword.declaration.zlang" },
		  "2": { "name": "entity.name.function.zlang" }
		},
		"end": "(?i)(?=FIN(?:\\s*;|\\s*(?:FONCTION|ACTION)|\\Z))",
		"patterns": [
		  { "include": "$self" }
		]
	  },
	  {
		"begin": "\\b(ACTION|ACTIONS)\\s+([A-Za-z_][A-Za-z0-9_]*)",
		"beginCaptures": {
		  "1": { "name": "keyword.declaration.zlang" },
		  "2": { "name": "entity.name.action.zlang" }
		},
		"end": "(?i)(?=FIN(?:\\s*;|\\s*(?:FONCTION|ACTION)|\\Z))",
		"patterns": [
		  { "include": "$self" }
		]
	  },
	  {
		"name": "constant.numeric.integer.zlang",
		"match": "\\b\\d+\\b"
	  },
	  {
		 "name": "string.quoted.double.zlang",
		 "begin": "\"",
		 "end": "\"",
		 "patterns": [
		   {
			 "name": "constant.character.escape.zlang",
			 "match": "\\\\."
		   }
		 ]
	  },
	   {
		 "name": "string.quoted.single.zlang",
		 "begin": "'",
		 "end": "'",
		 "patterns": [
		   {
			 "name": "constant.character.escape.zlang",
			 "match": "\\\\."
		   }
		 ]
	  },
	  {
		"name": "punctuation.separator.comma.zlang",
		"match": ","
	  },
	  {
		"name": "punctuation.separator.colon.zlang",
		"match": ":"
	  },
	  {
		"name": "punctuation.terminator.semicolon.zlang",
		"match": ";"
	  },
	  {
		"name": "punctuation.section.parens.begin.zlang",
		"match": "\\("
	  },
	  {
		"name": "punctuation.section.parens.end.zlang",
		"match": "\\)"
	  },
	  {
		"name": "punctuation.section.brackets.begin.zlang",
		"match": "\\["
	  },
	  {
		"name": "punctuation.section.brackets.end.zlang",
		"match": "\\]"
	  },
	  {
		"name": "variable.other.zlang",
		"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
	  }
	],
	"repository": {}
  }